# nucleo/aplicadorCambios.py
import os
import logging
import shutil
import json
import codecs
import re

# Obtener logger
log = logging.getLogger(__name__)


def _validar_y_normalizar_ruta(rutaRelativa, rutaBase, asegurar_existencia=False):
    """
    Validates that a relative path stays within the base path and normalizes it.
    Prevents path traversal. Returns the absolute, normalized path if safe, else None.
    """
    logPrefix = "_validar_y_normalizar_ruta:"
    if not rutaRelativa or not isinstance(rutaRelativa, str):
        log.error(f"{logPrefix} Invalid relative path received (None or not string): {rutaRelativa!r}")
        return None

    rutaBaseAbs = os.path.abspath(rutaBase)
    rutaBaseNorm = os.path.normpath(rutaBaseAbs)

    rutaRelativaNorm = os.path.normpath(rutaRelativa)
    if os.path.isabs(rutaRelativaNorm) or '..' in rutaRelativaNorm.split(os.sep):
        log.error(f"{logPrefix} Invalid or suspicious relative path (absolute or contains '..'): '{rutaRelativa}' -> '{rutaRelativaNorm}'")
        return None

    rutaAbsCandidata = os.path.join(rutaBaseNorm, rutaRelativaNorm)
    rutaAbsNorm = os.path.normpath(rutaAbsCandidata)

    try:
        rutaBaseReal = os.path.realpath(rutaBaseNorm)
        rutaAbsReal = os.path.realpath(rutaAbsNorm)
        if not os.path.isdir(rutaBaseReal):
             log.error(f"{logPrefix} Real base path is not a directory: '{rutaBaseReal}' (from '{rutaBase}')")
             return None

        if os.path.commonpath([rutaBaseReal, rutaAbsReal]) == rutaBaseReal:
            if asegurar_existencia and not os.path.exists(rutaAbsReal):
                log.warning(f"{logPrefix} Path validated but does not exist (existence required): '{rutaAbsNorm}'")
                return None
            log.debug(f"{logPrefix} Path validated and normalized to: '{rutaAbsNorm}'")
            return rutaAbsNorm
        else:
            log.error(f"{logPrefix} Path Traversal Attempt! Relative path '{rutaRelativa}' exits base '{rutaBaseNorm}'. Result: '{rutaAbsNorm}', Real Result: '{rutaAbsReal}', Real Base: '{rutaBaseReal}'")
            return None
    except Exception as e:
        log.error(f"{logPrefix} Error during path validation/realpath check for '{rutaRelativa}' in '{rutaBase}': {e}", exc_info=True)
        return None


MOJIBAKE_REPLACEMENTS = {
    b'\xc3\xa1'.decode('latin-1', errors='ignore'): "á",  # Ã¡ -> á
    b'\xc3\xa9'.decode('latin-1', errors='ignore'): "é",  # Ã© -> é
    b'\xc3\xad'.decode('latin-1', errors='ignore'): "í",  # Ã­ -> í
    b'\xc3\xb3'.decode('latin-1', errors='ignore'): "ó",  # Ã³ -> ó
    b'\xc3\xba'.decode('latin-1', errors='ignore'): "ú",  # Ãº -> ú
    b'\xc3\xbc'.decode('latin-1', errors='ignore'): "ü",  # Ã¼ -> ü
    b'\xc3\x81'.decode('latin-1', errors='ignore'): "Á",  # Ã -> Á
    b'\xc3\x89'.decode('latin-1', errors='ignore'): "É",  # Ã‰ -> É
    b'\xc3\x8d'.decode('latin-1', errors='ignore'): "Í",  # Ã -> Í
    b'\xc3\x93'.decode('latin-1', errors='ignore'): "Ó",  # Ã“ -> Ó
    b'\xc3\x9a'.decode('latin-1', errors='ignore'): "Ú",  # Ãš -> Ú
    b'\xc3\x9c'.decode('latin-1', errors='ignore'): "Ü",  # Ãœ -> Ü
    b'\xc3\xb1'.decode('latin-1', errors='ignore'): "ñ",  # Ã± -> ñ
    b'\xc3\x91'.decode('latin-1', errors='ignore'): "Ñ",  # Ã‘ -> Ñ
    b'\xc2\xa1'.decode('latin-1', errors='ignore'): "¡",  # Â¡ -> ¡
    b'\xc2\xbf'.decode('latin-1', errors='ignore'): "¿",  # Â¿ -> ¿
    b'\xc2\xaa'.decode('latin-1', errors='ignore'): "ª",  # Âª -> ª
    b'\xc2\xba'.decode('latin-1', errors='ignore'): "º",  # Âº -> º
    b'\xc2\xab'.decode('latin-1', errors='ignore'): "«",  # Â« -> «
    b'\xc2\xbb'.decode('latin-1', errors='ignore'): "»",  # Â» -> »
    b'\xe2\x82\xac'.decode('latin-1', errors='ignore'): "€", # â‚¬ -> €
    b'\xe2\x84\xa2'.decode('latin-1', errors='ignore'): "™", # â„¢ -> ™
    b'\xe2\x80\x99'.decode('latin-1', errors='ignore'): "’", # â€™ -> ’
    b'\xe2\x80\x98'.decode('latin-1', errors='ignore'): "‘", # â€˜ -> ‘
    b'\xe2\x80\x9c'.decode('latin-1', errors='ignore'): "“", # â€œ -> “
    b'\xe2\x80\x9d'.decode('latin-1', errors='ignore'): "”", # â€ -> ”
    b'\xe2\x80\xa6'.decode('latin-1', errors='ignore'): "…", # â€¦ -> …
    b'\xe2\x80\x93'.decode('latin-1', errors='ignore'): "–", # â€“ -> – 
    b'\xe2\x80\x94'.decode('latin-1', errors='ignore'): "—", # â€” -> —
}

def aplicarCambiosSobrescritura(archivos_con_contenido, rutaBase, accionOriginal, paramsOriginal):
    """
    Applies changes generated by Gemini.
    - Primero, decodifica las secuencias de escape estándar (\\n, \\t, \\uXXXX, \\\\) usando 'unicode_escape'.
    - Luego reemplaza secuencias comunes de Mojibake según un mapa predefinido.
    - Escribe los archivos en UTF-8.
    Maneja acciones de eliminación/creación de archivos o directorios.
    **Añade .gitkeep al crear directorios.**
    """
    logPrefix = "aplicarCambiosSobrescritura:"
    log.info(f"{logPrefix} Applying changes for original action '{accionOriginal}'...")
    rutaBaseNorm = os.path.normpath(rutaBase)

    # --- INICIO: Lógica específica para crear_directorio y eliminar_archivo ---
    if accionOriginal in ["eliminar_archivo", "crear_directorio"]:
        targetRel = paramsOriginal.get("archivo") or paramsOriginal.get("directorio")
        if not targetRel:
            return False, f"Missing target parameter ('archivo' or 'directorio') for {accionOriginal}."
        targetAbs = _validar_y_normalizar_ruta(targetRel, rutaBaseNorm, asegurar_existencia=False)
        if targetAbs is None:
            return False, f"Invalid or unsafe path provided for {accionOriginal}: '{targetRel}'"

        if accionOriginal == "eliminar_archivo":
            log.info(f"{logPrefix} Executing action '{accionOriginal}': Targeting {targetRel} (Abs: {targetAbs})")
            if os.path.exists(targetAbs):
                try:
                    if os.path.isfile(targetAbs) or os.path.islink(targetAbs):
                        os.remove(targetAbs)
                        log.info(f"{logPrefix} File/Link '{targetRel}' deleted.")
                    elif os.path.isdir(targetAbs):
                        # --- MODIFICADO: Asegurar que no borre recursivamente si no se pide ---
                        # Por ahora, solo borramos si está vacío. Si se necesita borrado recursivo,
                        # se necesitaría una acción diferente o un parámetro adicional.
                        try:
                            os.rmdir(targetAbs) # Solo borra si está vacío
                            log.info(f"{logPrefix} Empty directory '{targetRel}' deleted.")
                        except OSError:
                             err = f"Directory '{targetRel}' is not empty. Cannot delete."
                             log.error(f"{logPrefix} {err}")
                             return False, err
                        # Comentado: shutil.rmtree(targetAbs) # Esto borraría recursivamente
                        # log.info(f"{logPrefix} Non-empty directory '{targetRel}' recursively deleted.") # Si se usara rmtree
                    else:
                        err = f"Target '{targetRel}' exists but is not a file, link, or directory."
                        log.error(f"{logPrefix} {err}")
                        return False, err
                    return True, None
                except Exception as e:
                    err = f"Error deleting '{targetRel}': {e}"
                    log.error(f"{logPrefix} {err}", exc_info=True)
                    return False, err
            else:
                log.warning(f"{logPrefix} Target '{targetRel}' not found for deletion. Considering successful.")
                return True, None

        elif accionOriginal == "crear_directorio":
            log.info(f"{logPrefix} Executing action '{accionOriginal}': Creating directory {targetRel} (Abs: {targetAbs})")
            exito_creacion = False
            error_creacion = None
            if os.path.exists(targetAbs):
                if os.path.isdir(targetAbs):
                    log.warning(f"{logPrefix} Directory '{targetRel}' already exists.")
                    exito_creacion = True # Ya existe, consideramos éxito
                else:
                    err = f"Path '{targetRel}' exists but is not a directory. Cannot create directory."
                    log.error(f"{logPrefix} {err}")
                    error_creacion = err
                    exito_creacion = False
            else:
                try:
                    os.makedirs(targetAbs, exist_ok=True)
                    log.info(f"{logPrefix} Directory '{targetRel}' created.")
                    exito_creacion = True
                except Exception as e:
                    err = f"Error creating directory '{targetRel}': {e}"
                    log.error(f"{logPrefix} {err}", exc_info=True)
                    error_creacion = err
                    exito_creacion = False

            # --- INICIO: AÑADIR .gitkeep ---
            if exito_creacion:
                gitkeep_path = os.path.join(targetAbs, '.gitkeep')
                if not os.path.exists(gitkeep_path): # Crear solo si no existe
                    try:
                        with open(gitkeep_path, 'w', encoding='utf-8') as gk:
                            pass # Archivo vacío
                        log.info(f"{logPrefix} Archivo .gitkeep creado en '{targetRel}' para rastreo de Git.")
                    except Exception as e_gk:
                        # No hacemos que falle toda la operación por el .gitkeep, solo advertimos
                        log.warning(f"{logPrefix} No se pudo crear .gitkeep en '{targetRel}': {e_gk}")
                else:
                    log.debug(f"{logPrefix} Archivo .gitkeep ya existe en '{targetRel}'.")
            # --- FIN: AÑADIR .gitkeep ---

            return exito_creacion, error_creacion # Retornar el resultado de la creación del dir
    # --- FIN: Lógica específica para crear_directorio y eliminar_archivo ---


    # --- Lógica para modificar/crear archivos (resto de la función) ---
    if not isinstance(archivos_con_contenido, dict):
         err = "Argument 'archivos_con_contenido' is not a dictionary."
         log.error(f"{logPrefix} {err}")
         return False, err
    if not archivos_con_contenido:
        # Esto no debería ocurrir para acciones que modifican archivos, sería un error del Paso 2
        err = f"Expected content in 'archivos_con_contenido' for action '{accionOriginal}', but it's empty. Likely error in Step 2."
        log.error(f"{logPrefix} {err}")
        return False, err

    # ... (resto de la lógica para procesar archivos_con_contenido sin cambios) ...
    # ... (procesamiento de escapes, mojibake, escritura de archivos) ...

    log.info(f"{logPrefix} Processing {len(archivos_con_contenido)} file(s) for writing/modification...")
    archivosProcesados = []
    errores = []

    for rutaRel, contenido_original_json in archivos_con_contenido.items():
        archivoAbs = _validar_y_normalizar_ruta(rutaRel, rutaBaseNorm, asegurar_existencia=False)
        if archivoAbs is None:
            msg = f"Invalid or unsafe path ('{rutaRel}') received from Gemini (Step 2). File skipped."
            log.error(f"{logPrefix} {msg}")
            errores.append(msg)
            continue

        if not isinstance(contenido_original_json, str):
             log.warning(f"{logPrefix} Content for '{rutaRel}' is not string (type {type(contenido_original_json)}). Converting to JSON string.")
             try:
                 contenido_str = json.dumps(contenido_original_json, indent=2, ensure_ascii=False)
             except Exception as e_conv:
                  log.error(f"{logPrefix} Could not convert non-string content to string for '{rutaRel}': {e_conv}. Skipping file.")
                  errores.append(f"Invalid non-string content for {rutaRel}")
                  continue
        else:
             contenido_str = contenido_original_json

        dirPadre = os.path.dirname(archivoAbs)
        try:
            if dirPadre and not os.path.exists(dirPadre):
                log.info(f"{logPrefix} Creating necessary parent directory: {dirPadre}")
                os.makedirs(dirPadre, exist_ok=True)
            elif dirPadre and not os.path.isdir(dirPadre):
                 raise ValueError(f"Parent path '{dirPadre}' for file '{rutaRel}' exists but is NOT a directory.")
        except Exception as e_dir:
            msg = f"Error creating/validating parent directory '{dirPadre}' for '{rutaRel}': {e_dir}. File skipped."
            log.error(f"{logPrefix} {msg}", exc_info=True)
            errores.append(msg)
            continue

        # --- Start Correction Block (unicode_escape FIRST, then Targeted Replace Mojibake) ---
        contenido_procesado = contenido_str
        log.debug(f"{logPrefix} Content ORIGINAL for '{rutaRel}' (repr): {repr(contenido_procesado[:200])}...")

        ext = os.path.splitext(rutaRel)[1].lower()

        try:
            # --- STEP 1: Decode standard escapes ---
            if ext == '.php':
                log.debug(f"{logPrefix} Archivo PHP detectado ('{rutaRel}'): se omite la decodificación de escapes.")
                contenido_despues_escape = contenido_procesado
            else:
                contenido_despues_escape = contenido_procesado
                if '\\' in contenido_procesado:
                    log.debug(f"{logPrefix} Aplicando codecs.decode(..., 'unicode_escape') para '{rutaRel}'")
                    try:
                        # Usar 'backslashreplace' para manejar barras finales solitarias
                        contenido_decodificado = codecs.decode(contenido_procesado, 'unicode_escape', errors='backslashreplace')
                        if contenido_decodificado != contenido_procesado:
                            log.info(f"{logPrefix} CORRECCIÓN (unicode_escape): Secuencias de escape decodificadas para '{rutaRel}'.")
                            contenido_despues_escape = contenido_decodificado
                        else:
                            log.debug(f"{logPrefix} 'unicode_escape' aplicado sin cambios en '{rutaRel}'.")
                    except Exception as e_esc_decode:
                         log.warning(f"{logPrefix} Error durante 'unicode_escape' para '{rutaRel}': {e_esc_decode}. Usando contenido original.")
                         # Mantener contenido_procesado
                else:
                    log.debug(f"{logPrefix} No se encontraron barras invertidas; se omite 'unicode_escape' para '{rutaRel}'.")


            contenido_intermedio = contenido_despues_escape
            log.debug(f"{logPrefix} Content AFTER unicode_escape para '{rutaRel}' (repr): {repr(contenido_intermedio[:200])}...")

            # --- STEP 2: Reemplazo de secuencias Mojibake comunes ---
            contenido_final = contenido_intermedio
            replacements_made = False
            temp_contenido = contenido_intermedio

            for mojibake, correct in MOJIBAKE_REPLACEMENTS.items():
                # Asegurarse que 'mojibake' es string si contenido_intermedio es string
                if isinstance(contenido_intermedio, str):
                    mojibake_str = str(mojibake) if not isinstance(mojibake, str) else mojibake
                    new_temp_contenido = temp_contenido.replace(mojibake_str, correct)
                    if new_temp_contenido != temp_contenido:
                        if not replacements_made:
                            log.info(f"{logPrefix} CORRECCIÓN (Mojibake Replace): Se reemplazarán secuencias Mojibake para '{rutaRel}'.")
                        log.debug(f"{logPrefix}   Reemplazado: {repr(mojibake_str)} -> {repr(correct)}")
                        replacements_made = True
                        temp_contenido = new_temp_contenido
                # Añadir else o manejo si contenido_intermedio pudiera ser bytes

            if replacements_made:
                contenido_final = temp_contenido
            else:
                log.debug(f"{logPrefix} No se encontraron secuencias Mojibake en '{rutaRel}' tras escapes.")

            log.debug(f"{logPrefix} Content AFTER Mojibake Replace para '{rutaRel}' (repr): {repr(contenido_final[:200])}...")

            contenido_a_escribir = contenido_final
            log.debug(f"{logPrefix} FINAL content to write for '{rutaRel}' (start, repr): {repr(contenido_a_escribir[:200])}")

            if isinstance(contenido_a_escribir, str) and re.search(r'\\u[0-9a-fA-F]{4}', contenido_a_escribir):
                 log.warning(f"{logPrefix} ALERT! Content for '{rutaRel}' might STILL contain literal \\uXXXX escapes AFTER processing.")

            # --- Escribir el archivo ---
            with open(archivoAbs, 'w', encoding='utf-8') as f:
                if isinstance(contenido_a_escribir, str):
                    f.write(contenido_a_escribir)
                else:
                    # Si por alguna razón no es string, intentar escribir su representación
                    f.write(repr(contenido_a_escribir))
                    log.warning(f"{logPrefix} Contenido para '{rutaRel}' no era string al escribir, se usó repr().")

            log.info(f"{logPrefix} File '{rutaRel}' written/overwritten successfully.")
            archivosProcesados.append(rutaRel)

        except Exception as e_process_write:
             msg = f"Error processing/writing file '{rutaRel}': {e_process_write}"
             log.error(f"{logPrefix} {msg}", exc_info=True)
             errores.append(msg)

    # --- Finalización ---
    if errores:
        error_summary = f"Process completed with {len(errores)} error(s): {'; '.join(errores[:3])}{'...' if len(errores) > 3 else ''}"
        log.error(f"{logPrefix} {error_summary}")
        return False, error_summary
    elif not archivosProcesados and archivos_con_contenido:
         # Esto indica un error si esperábamos procesar archivos
         msg = "Content was provided but no files could be processed due to errors (see logs)."
         log.error(f"{logPrefix} {msg}")
         return False, msg
    log.info(f"{logPrefix} Processing finished. {len(archivosProcesados)} files written/modified successfully.")
    return True, None
